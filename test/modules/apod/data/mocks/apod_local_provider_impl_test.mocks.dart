// Mocks generated by Mockito 5.4.5 from annotations
// in nasa_challenge/test/modules/apod/data/apod_local_provider_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nasa_challenge/app/modules/localstorage/domain/usecase/add_storage_use_case.dart'
    as _i2;
import 'package:nasa_challenge/app/modules/localstorage/domain/usecase/delete_storage_use_case.dart'
    as _i3;
import 'package:nasa_challenge/app/modules/localstorage/domain/usecase/get_storage_use_case.dart'
    as _i4;
import 'package:nasa_challenge/app/modules/localstorage/domain/usecase/put_storage_use_case.dart'
    as _i5;
import 'package:nasa_challenge/app/modules/localstorage/presentation/mobx/db.store.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAddStorageUseCase_0 extends _i1.SmartFake
    implements _i2.AddStorageUseCase {
  _FakeAddStorageUseCase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteStorageUseCase_1 extends _i1.SmartFake
    implements _i3.DeleteStorageUseCase {
  _FakeDeleteStorageUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetStorageUseCase_2 extends _i1.SmartFake
    implements _i4.GetStorageUseCase {
  _FakeGetStorageUseCase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePutStorageUseCase_3 extends _i1.SmartFake
    implements _i5.PutStorageUseCase {
  _FakePutStorageUseCase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DBStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockDBStore extends _i1.Mock implements _i6.DBStore {
  MockDBStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AddStorageUseCase get addStorageUseCase => (super.noSuchMethod(
        Invocation.getter(#addStorageUseCase),
        returnValue: _FakeAddStorageUseCase_0(
          this,
          Invocation.getter(#addStorageUseCase),
        ),
      ) as _i2.AddStorageUseCase);

  @override
  _i3.DeleteStorageUseCase get deleteStorageUseCase => (super.noSuchMethod(
        Invocation.getter(#deleteStorageUseCase),
        returnValue: _FakeDeleteStorageUseCase_1(
          this,
          Invocation.getter(#deleteStorageUseCase),
        ),
      ) as _i3.DeleteStorageUseCase);

  @override
  _i4.GetStorageUseCase get getStorageUseCase => (super.noSuchMethod(
        Invocation.getter(#getStorageUseCase),
        returnValue: _FakeGetStorageUseCase_2(
          this,
          Invocation.getter(#getStorageUseCase),
        ),
      ) as _i4.GetStorageUseCase);

  @override
  _i5.PutStorageUseCase get putStorageUseCase => (super.noSuchMethod(
        Invocation.getter(#putStorageUseCase),
        returnValue: _FakePutStorageUseCase_3(
          this,
          Invocation.getter(#putStorageUseCase),
        ),
      ) as _i5.PutStorageUseCase);

  @override
  _i7.Future<void> insert(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> delete(String? key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> put(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<String>> get(String? key) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [key],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);
}
